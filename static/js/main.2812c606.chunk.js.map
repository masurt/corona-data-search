{"version":3,"sources":["components/DataLoader.tsx","components/SearchBar.tsx","App.js","reportWebVitals.js","index.js"],"names":["getLocations","data","locations","row","includes","location","push","getColumns","columns","Object","keys","arr","values","value","index","indexOf","splice","removeItemsOnce","dataFileUrl","CoronaSearchBar","useState","setData","setLocations","setColumns","columnValue","setColumnValue","columnInputValue","setColumnInputValue","locationValue","setLocationValue","locationInputValue","setLocationInputValue","selectedDatasets","setSelectedData","plotData","setPlotData","useEffect","a","d3","fetchData","onChangeHandlerFactor","setValue","event","newValue","reason","unifiedLabels","dataset","concat","labels","Array","from","Set","sort","plotDatasets","plotDataset","label","borderColor","Math","floor","random","fill","labelIndex","datasets","Typography","Link","href","Box","display","flexDirection","justifyContent","alignItems","m","Autocomplete","multiple","id","inputValue","onInputChange","onChange","options","debug","freeSolo","filterSelectedOptions","style","width","renderInput","params","TextField","variant","Button","onClick","column","filter","map","dat","getSearchedData","type","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2812c606.chunk.js","sourcesContent":["\nexport const getSearchedData = (data : any, columns : Array<string>, locations: Array<string>) => {\n\n  const datasets = []\n  for(const column of columns){\n    for(const location of locations){\n      \n      const dataset =  {\n        label: column + \" in \" + location,\n        labels: data\n          .filter((row: any) => (row.location === location))\n          .map((dat : any) => dat['date']),\n        data: data\n          .filter((row : any) => (row.location === location))   \n          .map((row : any) => row[column] === \"\" ? 0 : +row[column]),\n      }\n      \n      datasets.push(dataset)\n    }\n  }\n  return datasets\n}\n\nexport const getLocations = (data : any) => {\n  const locations : Array<string> = [];\n  for(const row of data){\n    if(!locations.includes(row.location)){\n      locations.push(row.location)\n    }\n  }\n  return locations\n}\n\nexport const getColumns = (data : any) => {\n  const columns = Object.keys(data[0])\n  removeItemsOnce(columns, [\"iso_code\", \"continent\", \"location\", \"date\"])\n  \n  return columns\n}\n\nfunction removeItemsOnce(arr : any, values : any) {\n  for(const value of values){\n    var index = arr.indexOf(value);\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n  } \n  return arr;\n}","import * as d3 from \"d3\";\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { Button, Typography, Box, Link } from '@material-ui/core'\n\nimport React, { useState, useEffect, Dispatch, SetStateAction } from 'react';\nimport { Line } from '@reactchartjs/react-chart.js'\n\nimport { getSearchedData, getLocations, getColumns } from \"./DataLoader\"\n\nconst dataFileUrl = 'https://covid.ourworldindata.org/data/owid-covid-data.csv'\n\nvar randomColor = function() {\n  var r = Math.floor(Math.random() * 255);\n  var g = Math.floor(Math.random() * 255);\n  var b = Math.floor(Math.random() * 255);\n  return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n};\n\nexport function CoronaSearchBar() {\n  // initially loaded data\n  const [data, setData] = useState<Array<any>>([])\n  const [locations, setLocations] = useState<Array<string>>([])\n  const [columns, setColumns] = useState<Array<string>>([])\n\n  // search stat\n  const [columnValue, setColumnValue] = useState([])\n  const [columnInputValue, setColumnInputValue] = useState(\"\")\n  const [locationValue, setLocationValue] = useState([])\n  const [locationInputValue, setLocationInputValue] = useState(\"\")\n\n  const [selectedDatasets, setSelectedData] \n    = useState < Array<( { label : string, labels: any, data: any })> >\n      ([])\n\n  // plot state\n  const [plotData, setPlotData] = useState({})\n\n  // initial data load\n  useEffect(() => {\n    async function fetchData() {\n      const data = await d3.csv(dataFileUrl);\n      setData(data)\n      setLocations(getLocations(data))\n      setColumns(getColumns(data))\n    }\n    fetchData()\n    \n  }, []);\n\n  /* ------------------ behaviour ---------------------- */\n  // value change handler\n  const onChangeHandlerFactor = (\n    value : Array<string>,\n    setValue : Dispatch<SetStateAction<never[]>>\n  ) => {\n    const onChangeHandler = (event: any, newValue: any, reason : string) => {\n      setValue(newValue)\n    };\n    return onChangeHandler\n  }\n\n  // search button click handler\n  const onClickHandler = () => {\n    setSelectedData(getSearchedData(data, columnValue, locationValue))\n  }\n\n  // update plot data\n  useEffect(() => {\n    // unify labels from all datasets\n    var unifiedLabels : string[] = []\n    for(const dataset of selectedDatasets){\n      unifiedLabels = unifiedLabels.concat(dataset.labels)\n    }    \n    unifiedLabels = Array.from(new Set(unifiedLabels))\n    unifiedLabels.sort()\n\n    // fill all datasets with zeros for dates where no data exists\n    const plotDatasets = []\n    for(const dataset of selectedDatasets){\n\n      const plotDataset : any = {label: dataset.label, \n        data: [],\n        borderColor: randomColor(), \n        fill: false}\n\n      for(const label of unifiedLabels){\n        const labelIndex : number = dataset.labels.indexOf(label)\n        if(labelIndex > -1){\n          plotDataset.data.push(dataset.data[labelIndex])\n        } else {\n          plotDataset.data.push(0)\n        }\n      }\n      plotDatasets.push(plotDataset)\n    }\n  \n    const plotData = {\n      labels : unifiedLabels,\n      datasets: plotDatasets\n    }\n    setPlotData(plotData)\n  }, [selectedDatasets])\n\n\n\n  return (\n    <div>\n        <h1>\n          Be water, my friend!\n        </h1>\n        <Typography>\n          Credit to <Link href='https://www.ourworldindata.org'>Our World in Data</Link>.\n           Data taken from the <Link href='https://www.github.com/owid/covid-19-data/tree/master/public/data'>Our World in Data covid-19-data github repository</Link>. \n        </Typography>\n        <Box\n          display='flex'\n          flexDirection='column'\n          justifyContent='flex-start'\n          alignItems='center'\n          m={2}\n          >\n          <Box m={1}>\n            <Typography>Show</Typography>\n          </Box>\n\n          <Autocomplete\n            multiple\n            id=\"searchColumn\"\n            inputValue={columnInputValue}\n            onInputChange={(event, newValue) => setColumnInputValue(newValue)}\n            value={columnValue}\n            onChange={onChangeHandlerFactor(columnValue, setColumnValue)}\n            options={columns}\n            debug\n            freeSolo\n            filterSelectedOptions\n            style={{ width: 300 }}\n            renderInput={(params) => <TextField {...params} label=\"Metric\" variant=\"outlined\" />}\n          />\n          \n          <Box m={1}>\n            <Typography>in</Typography>\n          </Box>\n\n          <Autocomplete\n            multiple\n            id=\"searchCountry\"\n            inputValue={locationInputValue}\n            onInputChange={(event, newValue) => setLocationInputValue(newValue)}\n            value={locationValue}\n            onChange={onChangeHandlerFactor(locationValue, setLocationValue)}\n            options={locations}\n            filterSelectedOptions\n            style={{ width: 300 }}\n            renderInput={(params) => <TextField {...params} label=\"Country\" variant=\"outlined\" />}\n            debug\n            freeSolo\n          />\n          <br/>\n          \n          <Box m={2}>\n            <Button\n              onClick={onClickHandler}\n              variant=\"outlined\"\n            >Load</Button>\n          </Box>  \n        </Box>\n        <Line data={plotData} type={null}/>\n    </div>\n  );\n}\n\n","import { useEffect } from 'react';\nimport './App.css';\n\nimport {CoronaSearchBar} from \"./components/SearchBar.tsx\"\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <CoronaSearchBar/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}