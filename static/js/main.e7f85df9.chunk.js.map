{"version":3,"sources":["logo.svg","components/DataLoader.js","components/SearchBar.js","App.js","reportWebVitals.js","index.js"],"names":["getLocations","data","locations","row","includes","location","push","getColumns","columns","Object","keys","arr","values","value","index","indexOf","splice","removeItemsOnce","dataFileUrl","CoronaSearchBar","useState","searchOptions","setSearchOptions","searchString","setSearchString","selectedColumn","setSelectedColumn","selectedLocation","setSelectedLocation","selectedData","setSelectedData","setData","setLocations","setColumns","plotData","setPlotData","useEffect","console","log","map","loc","searchArray","split","filter","s","length","a","d3","fetchData","labels","dat","datasets","label","fill","backgroundColor","borderColor","Autocomplete","id","inputValue","debug","freeSolo","disableClearable","options","onInputChange","event","newValue","style","width","renderInput","params","TextField","variant","Button","onClick","column","searchedData","getSearchedData","Typography","JSON","stringify","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7f85df9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as d3 from \"d3\";\n\n\n\nexport const getSearchedData = (data, column, location) => {\n  const searchedData = data\n    .filter((row) => (row.location === location))\n    .map((row) => {\n      return {'date': row['date'],\n              [column]: row[column]}\n    })\n  \n  console.log(searchedData)\n  return searchedData\n}\n\nexport const getLocations = (data) => {\n  const locations = []\n  for(const row of data){\n    if(!locations.includes(row.location)){\n      locations.push(row.location)\n    }\n  }\n  return locations\n}\n\nexport const getColumns = (data) => {\n  const columns = Object.keys(data[0])\n  removeItemsOnce(columns, [\"iso_code\", \"continent\", \"location\", \"date\"])\n  \n  return columns\n}\n\nfunction removeItemsOnce(arr, values) {\n  for(const value of values){\n    var index = arr.indexOf(value);\n    if (index > -1) {\n      arr.splice(index, 1);\n    }\n  } \n  return arr;\n}","import * as d3 from \"d3\";\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { Button, Typography } from '@material-ui/core'\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from '@reactchartjs/react-chart.js'\n\nimport { getSearchedData, getLocations, getColumns } from \"./DataLoader\"\n\nconst dataFileUrl = 'https://covid.ourworldindata.org/data/owid-covid-data.csv'\n\n\nexport function CoronaSearchBar() {\n  const [searchOptions, setSearchOptions] = useState([])\n  const [searchString, setSearchString] = useState(\"\")\n  \n  // state for search progress\n  const [selectedColumn, setSelectedColumn] = useState(null)\n  const [selectedLocation, setSelectedLocation] = useState(null)\n  const [selectedData, setSelectedData] = useState([])\n\n  // data\n  const [data, setData] = useState([])\n  const [locations, setLocations] = useState([])\n  const [columns, setColumns] = useState([])\n  \n  // plot state\n  const [plotData, setPlotData] = useState({})\n\n  useEffect(() => {\n    if(!selectedColumn && !selectedLocation){\n      setSearchOptions([])\n    } else if (selectedColumn && !selectedLocation) {\n      console.log(\"setting columns\", columns)\n      setSearchOptions(columns)\n    } else if (selectedColumn && selectedLocation) {\n      console.log(\"setting location\")\n      setSearchOptions(locations.map(loc => selectedColumn + ' ' + loc))\n    } else {\n      setSearchOptions([])\n    }\n  }, [selectedColumn, selectedLocation])\n\n  const onChangeHandler = (event, newValue) => {\n    setSearchString(newValue)\n  }\n\n  useEffect(() => {\n    const searchArray = searchString.split(' ').filter(s => s !== '')\n    if(searchArray.length == 0)\n    {\n      console.log(\"search array empty\")\n      setSelectedColumn(null)\n      setSelectedLocation(null)\n    } \n    else if(searchArray.length === 1)\n    {\n      setSelectedColumn(searchArray[0])\n      setSelectedLocation(null)\n    } \n    else if(searchArray.length >= 2)\n    {\n      setSelectedColumn(searchArray[0])\n      setSelectedLocation(searchArray[1])\n    }\n  }, [searchString])\n\n  const onClickHandler = () => {\n    const searchArray = searchString.split(' ').filter(s => s !== '')\n    setSelectedData(getSearchedData(data, searchArray[0], searchArray[1]))\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      const data = await d3.csv(dataFileUrl);\n      setData(data)\n      setLocations(getLocations(data))\n      setColumns(getColumns(data))\n    }\n    fetchData()\n  }, []);\n\n\n  useEffect(() => {\n    console.log(selectedData)\n    const plotData = {\n      labels: selectedData.map((dat) => dat['date']),\n      datasets: [\n        {\n          label: selectedColumn,\n          data: selectedData.filter(dat => (dat !== \"\")).map((dat) => +dat[selectedColumn]),\n          fill: false,\n          backgroundColor: 'rgb(255, 99, 132)',\n          borderColor: 'rgba(255, 99, 132, 0.2)',\n        },\n      ],\n    }\n    setPlotData(plotData)\n  }, [selectedData])\n\n  return (\n    <div>\n        The search bar goes \n        <Autocomplete\n          id=\"freeSoloDemo\"\n          inputValue={searchString}\n          debug\n          freeSolo\n          disableClearable\n          options={searchOptions}\n          onInputChange={onChangeHandler}\n          style={{ width: 300 }}\n          renderInput={(params) => <TextField {...params} label=\"Search\" variant=\"outlined\" />}\n        />\n        <br/>\n        <Button\n          onClick={onClickHandler}\n        >Search</Button>\n        <Line data={plotData}/>\n        <Typography> {(!plotData) ? \"No data selected.\" : JSON.stringify(plotData)} </Typography>\n        <Typography> {(!selectedData || selectedData.length === 0)  ?  \"No data selected.\" : JSON.stringify(selectedData)} </Typography>\n    </div>\n  );\n}\n\n","import logo from './logo.svg';\nimport './App.css';\n\nimport {CoronaSearchBar} from \"./components/SearchBar\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoronaSearchBar/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}